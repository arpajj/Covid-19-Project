# -*- coding: utf-8 -*-
"""Covid-19_main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D2BVgsO9XNeBg1N4j6HhZ_ony3s-xR4k



##Visualization Section
In this project, our purpose is to visualize some of the COVID-19 disease data that we received from WHO[[9]](https://covid19.who.int/table).
These data are related to total cases and deaths worldwide as well as total cases and deaths at country level. 
We also calculate the case fatality rate (CFR) both globally and internationally. 
In this point we need to distinguish the case fatality rate from the infection fatality rate (IFR). 
While the former is calculated as the fraction of confirmed deaths to confirmed cases, the latter is the ratio of confirmed deaths to the actual number of people infected with the virus. 
Therefore, in reality, we don't have the exact percentage for IFR since we don't know how many total cases are in the global population.
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import datetime
import folium
import io
from operator import itemgetter, attrgetter
import json
import os
import urllib.request
from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
from sklearn.linear_model import LinearRegression, BayesianRidge
from sklearn.linear_model import Ridge
from sklearn.preprocessing import PolynomialFeatures
from google.colab import drive ,files
import sys
from difflib import SequenceMatcher
from fbprophet import Prophet
from sklearn.preprocessing import MinMaxScaler, StandardScaler
import time, math
from random import randint
import itertools
from mpl_toolkits.mplot3d import Axes3D
import tensorflow as tf
import seaborn as sn
import collections

def similar(a, b):
    return SequenceMatcher(None, a, b).ratio()

drive.mount('/content/gdrive', force_remount=True)
sys.path.append('/content/gdrive/My Drive')

import submain_1 as sub
import visualize as vis
import curvefiting as crv
import metrics as mtr

os.chdir("/content/gdrive/My Drive")
data = pd.read_csv('WHO-COVID-19-global-data.csv')
data = pd.DataFrame(data)
population =  pd.read_excel('WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES.xlsx', index_col=None, header=None)
population = pd.DataFrame(population)
population = np.array(population)
more_data = pd.read_csv('owid-covid-data-old.csv')
more_data = pd.DataFrame(more_data)
#last_data = pd.read_csv('laaaaaaaaast.csv')
#last_data = pd.DataFrame(last_data)
#usa_data = pd.read_csv('national-history.csv')
#usa_data = pd.DataFrame(usa_data)
sys.path.append('/content/gdrive/My Drive')

more_data.head()

Dates_reported,countries,New_cases,New_deaths,Cumulative_cases,Cumulative_deaths = sub.WHO_data(data)
Dates,all_countries,icu_patients,hosp_patients,cumulative_tests,new_tests,life_exp,cum_vaccinations,vaccinated,new_vaccines,fully_vaccine = sub.Other_data(more_data)
Dates_reported2,countries2,New_cases2,New_deaths2,Cumulative_cases2,Cumulative_deaths2 = sub.WHO_data(last_data)
Population = sub.World_Population(population,countries)
print(Population)

Overall_per_country = []
Overll_per_country = sub.Make_Overall(Overall_per_country,countries,all_countries,Cumulative_cases,Cumulative_deaths,cumulative_tests,New_cases,New_deaths,new_tests,hosp_patients,icu_patients,life_exp,Population)
for i in range(len(Overall_per_country[0])):
  print((Overall_per_country[103][i]))

os.path.join('/content/gdrive/MyDrive/dataset', 'model_lstm.png')
china = Overall_per_country[81]
print(len(china[12]))
china[12],china[13],china[14],china[15] = np.array(china[12]),np.array(china[13]),np.array(china[14]),np.array(china[15])
china[12].shape,china[13].shape,china[14].shape,china[15].shape = (len(china[12]),1),(len(china[12]),1),(len(china[12]),1),(len(china[12]),1)
fuck = np.array(Dates_reported)
fuck.shape = (len(fuck),1)
CHINA = np.concatenate((fuck,china[12]), axis=1)
print(CHINA.shape)
subscript = np.zeros(len(CHINA))
for i in range(len(CHINA)-1):
  if (i==0):
    continue
  else:
    if (abs(float(CHINA[i][1])-float(CHINA[i-1][1]))>=500):
      subscript[i] = 1
subscript.shape = (len(subscript),1)
CHINA2 =  np.concatenate((CHINA,subscript), axis=1)
df = pd.DataFrame(CHINA2, columns = ['Ημερομηνία','Νέα Κρούσματα','Δείκτης Επισήμανσης'])#,'Αθροιστικά Κρούσματα','Νέοι Θάνατοι','Αθροιστικοί Θάνατοι'])
print(df)
df.to_excel(os.path.join('/content/gdrive/MyDrive/dataset/output.xlsx'))

for i in Overall_per_country:
  cases_million = []
  deaths_million = []
  for j in Population:
    if (i[0]==j[0]):
      for k in range(len(i[13])):
        jj = 10**6*(i[13][k]/j[1])
        kk = 10**6*(i[15][k]/j[1])
        cases_million.append(jj)
        deaths_million.append(kk)
  i.append(cases_million)
  i.append(deaths_million)

L=len(Dates_reported)
New_cases,New_deaths,Cumulative_cases,Cumulative_deaths,new_tests,cumulative_tests,hosp_patients,icu_patients,cum_vaccinations,vaccinated,new_vaccines,fully_vaccine = sub.padding_function(countries,all_countries,New_cases,New_deaths,Cumulative_cases,Cumulative_deaths,new_tests,cumulative_tests,hosp_patients,icu_patients,cum_vaccinations,vaccinated,new_vaccines,fully_vaccine,L)

World_cases ,World_deaths, World_tests,Daily_World_cases, Daily_World_deaths, Daily_World_tests, M_R_global_per_day, M_R_global_over_time,Total_cases,Total_deaths,Wcases_per_million,Wdeaths_per_million,Total_tests,Global_life_Exp,Daily_World_Positve_Rate,World_vaccines,Daily_World_vaccines = sub.World_data(Population,Overall_per_country,Cumulative_cases,Cumulative_deaths,cumulative_tests,New_cases,New_deaths,new_tests,life_exp,cum_vaccinations,new_vaccines)
World_cases = [round(x) for x in World_cases]
World_deaths = [round(x) for x in World_deaths]
World_tests = [round(x) for x in World_tests]
World_vaccines = [round(x) for x in World_vaccines]
print(Daily_World_Positve_Rate)
#for i,j in zip(Daily_World_cases,Daily_World_tests):
#  if (j!=0):
#    Daily_World_Positve_Rate.append(np.round(i/j,3))
#  else:
#    Daily_World_Positve_Rate.append(0)
print(Daily_World_cases)
print(len(Daily_World_Positve_Rate))
print(Global_life_Exp)
daily_world_cases = np.copy(Daily_World_cases)
daily_world_cases = list (daily_world_cases)
print(np.sum(Daily_World_cases))

weekly_tests = sub.moving_av(Daily_World_tests,7)
#Dates_reported.shape = (len(Dates_reported),)
vis.plot_daily_tests(Dates_reported,Daily_World_tests,weekly_tests,"Worldwide")
vis.plot_cum_tests(Dates_reported,World_tests,"Worldwide","linear",1)

weekly_tests = sub.moving_av(new_tests[204],7)
#Dates_reported.shape = (len(Dates_reported),)
vis.plot_daily_tests(Dates_reported,new_tests[204],weekly_tests,"in "+all_countries[204])
vis.plot_cum_tests(Dates_reported,cumulative_tests[204],"in "+all_countries[204],"linear",cumulative_tests[204][-1])

vis.plot_patients(Dates_reported,hosp_patients[97],icu_patients[97],"in "+all_countries[97],"linear",hosp_patients[97][-1])

vis.World_Statistics(Total_cases,Total_deaths,Wcases_per_million,Wdeaths_per_million)

vis.plot_WorldMR(Dates_reported,Overall_per_country[181][7],"total")
vis.plot_WorldMR(Dates_reported,M_R_global_per_day,"daily")

vis.plot_top10(Overall_per_country,1,'with most recorded cases','Total Cases',15)
vis.plot_top10(Overall_per_country,2,'with most recorded deaths','Total Deaths',15)
vis.plot_top10(Overall_per_country,4,'by mortality rate','Mortality Rate',15)
vis.plot_top10(Overall_per_country,3,'by cases/million of population','Cases per million',13)
vis.plot_top10(Overall_per_country,5,'by deaths/million of population','Deaths per million',13)
vis.plot_top10(Overall_per_country,6,'by most conducting test','Total Number of Tests',13)

def plot_top10(tlist,index,string1,string2,f):
  sorted_list = sorted(tlist, key=itemgetter(index),reverse=True)
  fig = plt.figure(figsize=(22,6))
  ax = fig.add_axes([0,0,1,1])
  plt.title("Top ten countries " +  string1,fontsize=20, color='C0')
  plt.xlabel('Country', fontsize=20)
  plt.ylabel(string2,fontsize=20)
  plt.xticks(rotation=-10)
  colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan', 'yellow', 'magenta', 'green', 'orange', 'pink')
  for i in range(0,10):
    ax.bar(sorted_list[i][0],sorted_list[i][index],color=colors[i], width=0.9, label=sorted_list[i][0])
  plt.legend(fontsize=f)
  plt.show()

plot_top10(Overall_per_country,1,'with most recorded cases','Total Cases',15)
plot_top10(Overall_per_country,2,'with most recorded deaths','Total Deaths',15)
plot_top10(Overall_per_country,4,'by mortality rate','Mortality Rate',15)
plot_top10(Overall_per_country,6,'by deaths/million of population','Deaths per million',13)
plot_top10(Overall_per_country,5,'by cases/million of population','Cases per million',13)

weekly_deaths = sub.moving_av(Daily_World_deaths,7)
weekly_cases = sub.moving_av(Daily_World_cases,7)
vis.plot_daily(Dates_reported,Daily_World_cases,Daily_World_deaths,weekly_cases,weekly_deaths,'Worldwide')

vis.plot_cumulative(Dates_reported,World_cases,World_deaths,"Worldwide","linear",1)
vis.plot_cumulative(Dates_reported,World_cases,World_deaths,"Worldwide","log",1)

vis.plot_pie_charts(countries,Overall_per_country, 1, 'Covid-19 Confirmed Cases per Country(Pie Chart)')
vis.plot_pie_charts(countries,Overall_per_country, 2, 'Covid-19 Confirmed Deaths per Country(Pie Chart)')

heat_table = vis.Heat_Table(Overall_per_country)
heat_table

vis.plot_top5(Dates_reported,Cumulative_cases,Overall_per_country,-1,1,"Cases")
vis.plot_top5(Dates_reported,Cumulative_deaths,Overall_per_country,-1,2,"Deaths")

vis.plot_horizontal_bars(countries,Cumulative_cases)

new_cases = np.copy(New_cases)
crv.Late_weighted_average(new_cases.tolist(),10,countries,10)

new_cases = np.copy(New_cases)
crv.Central_weighted_average(new_cases.tolist(),10,countries,10)

new_cases = np.copy(New_cases)
crv.Early_weighted_average(new_cases.tolist(),10,countries,10)

days_in_future = 10
Passed_days_list,future_forcast,adjusted_dates,future_dates_reported = crv.MakeDays(Dates_reported,days_in_future)

X_all,Y_all,X_train,y_train,X_test,y_test = crv.TrainTestSplit(Passed_days_list,World_cases)
SVΜ_cases = SVR(shrinking=True, kernel="poly", gamma=0.2, epsilon=0.5, degree=3, C=0.03, coef0=1.5)
crv.test_predictor(X_train,y_train,X_test,y_test,SVΜ_cases,None,'SVM Predictions', True)
SVM_prediction = crv.CurvePredictor(X_all,Y_all,SVΜ_cases,None,future_forcast,False)
"""SVΜ_cases.fit(X_all,Y_all)
predict_SVΜ = SVΜ_cases.predict(future_forcast)"""

crv.plot_predictions(Y_all, SVM_prediction, adjusted_dates, future_forcast, 'red','SVM Predictions')

SVM_prediction.shape = (len(SVM_prediction),)
crv.Show_prediction_by_day(future_dates_reported,'SVM predictions',SVM_prediction, days_in_future)

linearR_cases = LinearRegression(fit_intercept=True, normalize=True)
crv.test_predictor(X_train,y_train,X_test,y_test,linearR_cases,None,'Linear Regression Predictions',True)
linear_prediction = crv.CurvePredictor(X_all,Y_all,linearR_cases,None,future_forcast,False)
"""linearR_cases.fit(X_all,Y_all)
predict_linearR = linearR_cases.predict(future_forcast) """

crv.plot_predictions(Y_all, linear_prediction, adjusted_dates, future_forcast, 'green','Linear Regression Predictions')

linear_prediction.shape = (len(linear_prediction),)
crv.Show_prediction_by_day(future_dates_reported,'Linear Regression predictions',linear_prediction, days_in_future)

poly_reg = PolynomialFeatures(degree=4)
lin_reg = LinearRegression()
polynomial_prediction = crv.CurvePredictor(X_all,Y_all,poly_reg,lin_reg,future_forcast,False)
crv.test_predictor(X_train,y_train,X_test,y_test,poly_reg,lin_reg,'Polynomial Regression Predictions',False)
"""X_poly_present = poly_reg.fit_transform(X_all)
X_poly_future = poly_reg.fit_transform(future_forcast)
lin_reg.fit(X_poly_present, Y_all)
predict_polynomialR = lin_reg.predict(X_poly_future)"""

crv.plot_predictions(Y_all, polynomial_prediction, adjusted_dates, future_forcast, 'orange','Polynomial Regression Predictions')

polynomial_prediction.shape = (len(polynomial_prediction),)
crv.Show_prediction_by_day(future_dates_reported,'Polynomial Regression predictions',polynomial_prediction ,days_in_future)

bayesian_poly = PolynomialFeatures(degree=4)
bayesian = BayesianRidge(n_iter=600,compute_score=True,fit_intercept=False)
bayesian_prediction = crv.CurvePredictor(X_all,Y_all,bayesian_poly,bayesian,future_forcast,False)
"""X_new_present = bayesian_poly.fit_transform(X_all)
X_new_future = bayesian_poly.fit_transform(future_forcast)
bayesian.fit(X_new_present,Y_all)
predict_bayesian = bayesian.predict(X_new_future)"""
crv.test_predictor(X_train,y_train,X_test,y_test,bayesian_poly,bayesian,'Bayesian Ridge Predictions',False)

crv.plot_predictions(Y_all, bayesian_prediction, adjusted_dates, future_forcast, 'magenta','Bayesian Ridge Predictions')

crv.Show_prediction_by_day(future_dates_reported,'Bayesian Ridge predictions',bayesian_prediction, days_in_future)

X_all,Y_all,X_train,y_train,X_test,y_test = crv.TrainTestSplit(Passed_days_list,Cumulative_cases[81])
SVΜ_cases_Gr = SVR(kernel = "rbf", gamma=0.9, epsilon=0.1)
greek_prediction = crv.CurvePredictor(X_all,Y_all,SVΜ_cases_Gr,None,future_forcast,True)
crv.plot_predictions(Y_all, greek_prediction, adjusted_dates, future_forcast, 'red','SVM Predictions for Greece')

test_prediction = crv.CurvePredictor(X_train,y_train,SVΜ_cases_Gr,None,X_test,True)
plt.plot(y_test)
plt.plot(test_prediction)
plt.grid(True)
plt.legend(['Real Cases','Grecce predictions'])

crv.Show_prediction_by_day(future_dates_reported,'SVM predictions for Greece',greek_prediction,days_in_future)

poly_reg = PolynomialFeatures(degree=10,interaction_only=True)
lin_reg = LinearRegression()
X_poly_present = poly_reg.fit_transform(X_all)
X_poly_future = poly_reg.fit_transform(future_forcast)
lin_reg.fit(X_poly_present, Y_all)
predict_polynomialR = lin_reg.predict(X_poly_future)
lin_reg.fit(X_poly_present, Y_all)
predict_polynomialR_gr = lin_reg.predict(X_poly_future)
crv.plot_predictions(Y_all, predict_polynomialR_gr, adjusted_dates, future_forcast, 'orange','Polynomial Regression Predictions for Greece')

predict_polynomialR_gr.shape = (len(predict_polynomialR_gr),)
crv.Show_prediction_by_day(future_dates_reported,'Polynomial Regression predictions for Greece',predict_polynomialR_gr,days_in_future)

bayesian_poly = PolynomialFeatures(degree=5)
bayesian = BayesianRidge(n_iter=1000,compute_score=True,fit_intercept=False,tol=0.0001)
X_new_present = bayesian_poly.fit_transform(X_all)
X_new_future = bayesian_poly.fit_transform(future_forcast)
bayesian.fit(X_new_present,Y_all)
predict_bayesian = bayesian.predict(X_new_future)
bayesian.fit(X_new_present,Y_all)
predict_bayesian_gr = bayesian.predict(X_new_future)
crv.plot_predictions(Y_all, predict_bayesian_gr, adjusted_dates, future_forcast, 'magenta','Bayesian Ridge Predictions in Greece')

crv.Show_prediction_by_day(future_dates_reported,' Bayesian Interpolation predictions for Greece',predict_bayesian_gr,days_in_future)

daily_world_cases = np.array(daily_world_cases)
daily_world_cases.shape = (len(daily_world_cases),1)
print(daily_world_cases.shape)
Dates_reported = np.array(Dates_reported)
Dates_reported.shape = (len(Dates_reported),1)
print(Dates_reported.shape)
World_cases_perday = np.concatenate((Dates_reported,daily_world_cases), axis=1)
print((World_cases_perday.shape))
World_cases_perday = pd.DataFrame(data=World_cases_perday)
World_cases_perday.columns = ['ds', 'y']
print(World_cases_perday)

ph = Prophet(n_changepoints=41, changepoint_prior_scale=1 , interval_width=1, daily_seasonality=True, yearly_seasonality=True, seasonality_mode='additive',seasonality_prior_scale=10)
ph.fit(World_cases_perday)
World_cases_perday.tail()

future_prediction = ph.make_future_dataframe(periods=10)
future_prediction.tail(10)

forecast = ph.predict(future_prediction)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(10)

y = np.array(forecast['yhat'])[-10:]
y_l = np.array(forecast['yhat_lower'])[-10:]
y_u = np.array(forecast['yhat_upper'])[-10:]
for i in range(len(y)):
  y[i] = int (y[i])
  y_l[i] = int (y_l[i])
  y_u[i] = int (y_u[i])
print(y)
print(y_l)
print(y_u)

future_plot = ph.plot(forecast, figsize=(14,8), xlabel='days', ylabel='cases')

trends_weekly_dayly_plot = ph.plot_components(forecast, figsize=(14,8))

!pip install statsmodels

#evaluate an ARIMA model using a walk-forward validation
from pandas import read_csv
from pandas import datetime
from matplotlib import pyplot
import statsmodels.api as sm
#import statsmodels.tsa.arima #.model import ARIMA
from sklearn.metrics import mean_squared_error
from math import sqrt
data_a = Daily_World_cases
labels = np.array(data_a)
size = int(len(labels) * 0.9)
train, test = labels[0:size], labels[size:len(labels)]
history = [x for x in train]
predictions = list()
# walk-forward validation
for t in range(len(test)):
	model = sm.tsa.ARIMA(history, order=(5,2,2))
	model_fit = model.fit()
	output = model_fit.forecast()
	yhat = output[0]
	predictions.append(yhat)
	obs = test[t]
	history.append(obs)
	print('predicted=%f, expected=%f' % (yhat, obs))
# evaluate forecasts
rmse = sqrt(mean_squared_error(test, predictions))
# plot forecasts against actual outcomes
pyplot.plot(test, label="Actual")
pyplot.plot(predictions, color='red', label="ARIMA")
pyplot.legend()
pyplot.show()
mtr.R_square(test,predictions)
mtr.RMSPE(test,predictions)
mtr.MAPE(predictions,test,0)
print("Final Accuracy of ARIMA is: ", np.round(100-np.mean(mtr.accuracy_func([],test,predictions)),2),"%")
print('Test RMSE: %.3f' % rmse)

Overall,countries_geo = vis.MapPreparation(Overall_per_country)

alist = [0, 0.85, 0.93, 0.96, 0.985, 0.991, 0.995,1]
Legends = ['Cases','Deaths','Tests','Mortality', 'Cases per milion', 'Deaths per milion']
Map = vis.MakeMap(1,'OrRd',alist, Legends,Overall,countries_geo)
Map

alist = [0, 0.82, 0.9, 0.94, 0.968, 0.985, 0.993,1]
Map = vis.MakeMap(2,'BuPu',alist,Legends,Overall,countries_geo)
Map

alist = [0, 0.5, 0.8, 0.9, 0.96, 0.991, 0.995,1]
Map = vis.MakeMap(4,'YlGnBu',alist,Legends,Overall,countries_geo)
Map

alist = [0, 0.49, 0.65, 0.75, 0.89, 0.954, 0.984,1]
Map = vis.MakeMap(5,'YlGn',alist,Legends,Overall,countries_geo)
Map

alist = [0, 0.6, 0.72, 0.83, 0.9, 0.975, 0.993,1]
Map = vis.MakeMap(6,'YlOrRd',alist,Legends,Overall,countries_geo)
Map

