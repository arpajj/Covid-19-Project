# -*- coding: utf-8 -*-
"""metrics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dsHV7m8ulD6PPiaot4MhNtQgBWBTnkZU
"""

import numpy as np 
import matplotlib.pyplot as plt

def accuracy_func(error,real,preds):
  for i,j in zip(real,preds):
    if (i!=0):
      err = (abs(1-(j/i)))
      error.append(err)
    else:
      error.append(0)
  for i in range(len(error)):
    error[i] = np.round(100*error[i],2)

  return (error)

def plot_LSTM_pred_Keras(dataset,predictions,train_len):
  train = dataset[:train_len]
  actual = dataset[train_len:]
  actual = np.array([a[0] for a in actual])
  zeros=np.array([float('nan') for i in range(len(train))])
  pred=np.concatenate((zeros,predictions),axis=0)
  actuals=np.concatenate((zeros,actual),axis=0)
  plt.figure(figsize=(20,10))
  plt.title("Real Cases VS Predictions", fontsize=20)
  plt.xlabel('Days passed', fontsize=18)
  plt.ylabel('Number of Cases', fontsize=18)
  plt.plot(train,label='Training Cases',linewidth=2.5)
  plt.plot(actuals,label='Actual Cases (Test)',linewidth=2.5)
  plt.plot(pred,label='Model Predictions',linewidth=2.5)
  plt.legend(fontsize=18)
  plt.grid(True)
  plt.show()
  return (actual[-len(predictions):],pred[-len(predictions):])

def MAPE(prd,obs,number):
  Sum = 0
  if (number>0):
    prd = prd[:-number]
    obs = obs[:-number]
  for i,j in zip(prd,obs):
    if (j!=0):
      Sum += abs(j-i)/j
    else:
      Sum += 0
  mape = (100/len(prd))*Sum
  print("The mean absolute percentage error (MAPE) is: ", np.round(mape.item(),2), "%")
  return np.round(mape.item(),2)

def plot_bars(pred,actuals,length, dates_reported):
  preds = list (pred[-length:])
  real = list (actuals[-length:])
  dates = list (dates_reported[-length:])
  days = []
  for i in dates:
    days.append(i[0])
     
  barWidth = 0.25
  d1 = np.arange(len(days))
  d2 = [x + barWidth for x in d1]
  fig = plt.figure(figsize=(25,6))
  ax = fig.add_axes([0,0,1,1])
  plt.bar(d1,real, color='b',width=barWidth, label='actual cases')
  plt.bar(d2,preds, color='r',width=barWidth, label='prediction')
  plt.xticks([r + barWidth for r in range(len(days))], days,rotation=90)
  plt.legend(fontsize=14)
  plt.show()
  print("Final Accuracy of the model is: ", np.round(100-np.mean(accuracy_func([],real,preds)),2),"%")
  return np.round(100-np.mean(accuracy_func([],real,preds)),2)

def R_square(obss,predd):
  mean_obs = np.mean(obss)
  SS_tot = np.sum((obss-mean_obs)**2)
  e_s = np.zeros(len(obss))
  for i in range(len(obss)):
    e_s[i] = (obss[i]-predd[i])**2
  SS_res = np.sum(e_s)
  R_2 = 1 - (SS_res/SS_tot)
  print("The R_squared value is: ", np.round(R_2,3))
  return np.round(R_2,3)

def RMSPE(obss,predd):
  e = np.zeros(len(obss))
  for i in range(len(obss)):
    if (obss[i]!=0):
      e[i] = ((predd[i]-obss[i])/obss[i])**2
    else:
      e[i] = 0
  temp = np.sqrt(np.mean(e))
  print("The root mean squared percentage error (RMSPE) is: " , np.round(100*temp,2),'%')
  return np.round(100*temp,2)

