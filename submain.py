# -*- coding: utf-8 -*-
"""Submain.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SXU8Y1sKd-_HB5fQPnGgEKBmbS7Zuwxn
"""

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import time, math
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import datetime
from difflib import SequenceMatcher
from random import randint

def similar(a, b):
    return SequenceMatcher(None, a, b).ratio()

def WHO_data(data):
  countries = data['Country'].unique()
  country_codes = data['Country_code'].unique()
  who_region = data['WHO_region'].unique()
  Dates_reported = data['Date_reported'].unique()
  Dates_reported = sorted(list (Dates_reported))
  New_cases=[]
  New_deaths=[]
  Cumulative_cases=[]
  Cumulative_deaths=[]
  for c in countries:
      New_cases.append(list(data['New_cases'].where(data['Country']==c).dropna()))
      New_deaths.append(list(data['New_deaths'].where(data['Country']==c).dropna()))
      Cumulative_cases.append(list(data['Cumulative_cases'].where(data['Country']==c).dropna()))
      Cumulative_deaths.append(list(data['Cumulative_deaths'].where(data['Country']==c).dropna()))

  return (Dates_reported,countries,New_cases,New_deaths,Cumulative_cases,Cumulative_deaths)

def Other_data(more_data):
  all_countries = more_data['location'].unique()
  Dates = more_data['date'].unique()
  Dates = sorted(list (Dates))
  icu_patients = []
  new_tests = []
  cumulative_tests = []
  hosp_patients = []
  life_exp = []
  cum_vaccinations = []
  vaccinated = []
  new_vaccines = []
  fully_vaccine = []
  for i in all_countries:
    icu_patients.append(list(more_data['icu_patients'].where(more_data['location']==i).dropna()))
    hosp_patients.append(list(more_data['hosp_patients'].where(more_data['location']==i).dropna()))
    cumulative_tests.append(list(more_data['total_tests'].where(more_data['location']==i).dropna()))
    new_tests.append(list(more_data['new_tests'].where(more_data['location']==i).dropna()))
    life_exp.append(list(more_data['life_expectancy'].where(more_data['location']==i).dropna()))
    cum_vaccinations.append(list(more_data['total_vaccinations'].where(more_data['location']==i).dropna()))
    vaccinated.append(list(more_data['people_vaccinated'].where(more_data['location']==i).dropna()))
    new_vaccines.append(list(more_data['people_fully_vaccinated'].where(more_data['location']==i).dropna()))
    fully_vaccine.append(list(more_data['new_vaccinations'].where(more_data['location']==i).dropna()))

  return (Dates,all_countries,icu_patients,hosp_patients,cumulative_tests,new_tests,life_exp,cum_vaccinations,vaccinated,new_vaccines,fully_vaccine)

#ftiaxnw mia lista apo listes me opou kathe upolista exei onoma ths xwras kai ton pluthismo ths. 
def World_Population(pop,cnt):
  tlist = []
  for i in range(43,len(pop)):
    for j in range(0,len(cnt)):
      if (pop[i,2]==cnt[j]):
        mlk =[pop[i,2],pop[i,-1]*1000]
        tlist.append(mlk)
  return (tlist)

def Make_Mrcountries(k,C_c,D_c):
  MRlist = []
  for i in range(len(C_c[k])):
    if (C_c[k][i]!=0):
      MRlist.append((100*D_c[k][i])/C_c[k][i])
    else:
      MRlist.append(0)
  return (MRlist)

def Make_Overall(alist,countries,all_countries,C_c,C_d,C_t,N_c,N_d,N_t,hosp,icu,life,Pop):
  countries[135] = "Micronesia"
  for i in range(len(countries)):
      templist = []
      My_array = ["empty",0,0,0,0,0,0,[],[],[],[],[],[],[],[],[],0]
      My_array[0] = countries[i]
      My_array[1] = C_c[i][-1]
      My_array[2] = C_d[i][-1]
      if (C_c[i][-1]!=0):
        My_array[4] = (C_d[i][-1]/C_c[i][-1])*100
      else:
        My_array[4] = 0.0
      for j in Pop:
        if (j[0]==countries[i]):
          My_array[5] = ((C_c[i][-1])/j[1])*1000000
          My_array[6] = ((C_d[i][-1])/j[1])*1000000
          break
        else:
          My_array[5] = 0.0
          My_array[6] = 0.0
      My_array[7] = Make_Mrcountries(i,C_c,C_d)
      for j in range(len(all_countries)):
        x = similar(all_countries[j],countries[i])
        templist.append(x)
      if (countries[i]=="Czechia"):
        j=49
      elif (countries[i]=="Russian Federation"):
        j=163
      else:
        j = templist.index(max(templist))
      My_array[8] = hosp[j]
      My_array[9] = icu[j]
      My_array[10] = N_t[j]
      My_array[11] = C_t[j]
      if (My_array[11]!=[]):
        My_array[3] = My_array[11][-1]
      else:
        My_array[3] = 0

      My_array[12] = N_c[i]
      My_array[13] = C_c[i]
      My_array[14] = N_d[i]
      My_array[15] = C_d[i]
      if (len(life[j])>0):
        My_array[16] = life[j][0]
      else:
        value = randint(65,90)
        My_array[16] = value

      alist.append(My_array)
  return (alist)

def padding_function(countries,all_countries,cases,deaths,cum_cases,cum_deaths,newtests,cumtests,hospat,icupat,totvaccines,peoplevac,newvaccines,fully_vaccine,L):
  for i,c in enumerate(countries):
    P=L-len(cases[i])
    for k in range(P):
      cases[i].insert(0,0)
      deaths[i].insert(0,0)
      cum_cases[i].insert(0,0)
      cum_deaths[i].insert(0,0)
  for i,c in enumerate(all_countries):
    P1=L-len(newtests[i])
    P2=L-len(cumtests[i])
    P3=L-len(hospat[i])
    P4=L-len(icupat[i])
    P5=L-len(totvaccines[i])
    P6=L-len(peoplevac[i])
    P7=L-len(newvaccines[i])
    P8=L-len(fully_vaccine[i])
    for k in range(P1):
      newtests[i].insert(0,0)
    for k in range(P2):
      cumtests[i].insert(0,0)
    for k in range(P3):
      hospat[i].insert(0,0)
    for k in range(P4):
      icupat[i].insert(0,0)
    for k in range(P5):
      totvaccines[i].insert(0,0)
    for k in range(P6):
      peoplevac[i].insert(0,0)
    for k in range(P7):
      newvaccines[i].insert(0,0)
    for k in range(P8):
      fully_vaccine[i].insert(0,0)
  return (cases,deaths,cum_cases,cum_deaths,newtests,cumtests,hospat,icupat,totvaccines,peoplevac,newvaccines,fully_vaccine)

def moving_av(series,w):
    step=w//2
    s=[]
    for i in range(step):
        s.append(0)
    for c in range(step,len(series)-step):
        sum=0
        for i in range(c-step,c+step+1):
            sum=sum+series[i]
        s.append(sum/w)
    for i in range(step):
        s.append(0)
    return (s)

def World_data(Population_,Overall,Cumulative_cases_,Cumulative_deaths_,cumulative_tests_,New_cases_,New_deaths_,new_tests_,life_exp_,cumulative_vaccines_,new_vaccines_):
    SumCases = 0
    SumDeaths = 0
    SumPop = 0
    SumTests = 0
    for i in Population_:
      SumPop = SumPop + i[1]
    for i in Overall:
      SumCases = SumCases + i[1]
      SumDeaths = SumDeaths + i[2]
      SumTests = SumTests + i[3]
    W_c_p_m = int ((SumCases/SumPop)*1000000)
    W_d_p_m = int ((SumDeaths/SumPop)*1000000)
    day_list=[]
    time_list=[]
    life_expactancy=[]
    d_wor_pos_rate = []
    clist_total = [sum(x) for x in zip(*Cumulative_cases_)]
    dlist_total = [sum(x) for x in zip(*Cumulative_deaths_)]
    tlist_total = [sum(x) for x in zip(*cumulative_tests_)]
    vlist_total = [sum(x) for x in zip(*cumulative_vaccines_)]
    clist_daily = [sum(x) for x in zip(*New_cases_)]
    dlist_daily = [sum(x) for x in zip(*New_deaths_)]
    tlist_daily = [sum(x) for x in zip(*new_tests_)]
    vlist_daily = [sum(x) for x in zip(*new_vaccines_)]
    for i,j in zip(clist_daily,dlist_daily):
      if (i!=0): day_list.append(j/i)
      else: day_list.append(0)
    
    for i,j in zip(clist_total,dlist_total):
      if (i!=0): time_list.append(j/i)
      else: time_list.append(0)

    for i in range(len(life_exp_)):
      if (len(life_exp_[i])==0):
        value = randint(65,90)
        life_expactancy.append(value)
      else:
        life_expactancy.append(life_exp_[i][0])
    
    for i,j in zip(clist_daily,dlist_daily):
      if (j!=0):
        d_wor_pos_rate.append(np.round(i/j,3))
      else:
        d_wor_pos_rate.append(0)
      
    return (clist_total,dlist_total,tlist_total,clist_daily,dlist_daily,tlist_daily,day_list,time_list,SumCases,SumDeaths,W_c_p_m,W_d_p_m,SumTests,np.mean(life_expactancy),d_wor_pos_rate,vlist_total,vlist_daily)

