# -*- coding: utf-8 -*-
"""Visualize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LfUjz_XxjwMyIBJjrnJrs4G5aSY9OE6z
"""

# Commented out IPython magic to ensure Python compatibility.
import time, math
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
from operator import itemgetter, attrgetter
import collections
import folium
import io
import json
import os
import urllib.request
import sys
from difflib import SequenceMatcher
import time, math
from random import randint
import urllib.request

def similar(a, b):
    return SequenceMatcher(None, a, b).ratio()

def plot_top10(tlist,index,string1,string2,f):
  sorted_list = sorted(tlist, key=itemgetter(index),reverse=True)
  fig = plt.figure(figsize=(16,6))
  ax = fig.add_axes([0,0,1,1])
  plt.title("Top ten countries " +  string1,fontsize=20, color='C0')
  plt.xlabel('Country', fontsize=20)
  plt.ylabel(string2,fontsize=20)
  colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan', 'yellow', 'magenta', 'green', 'orange', 'pink')
  for i in range(0,10):
    ax.bar(sorted_list[i][0],sorted_list[i][index],color=colors[i], width=0.9, label=sorted_list[i][0])
  plt.legend(fontsize=f)
  plt.show()

def plot_WorldMR(days,tlist,string):
  plt.figure(figsize=(50,20))
  plt.title("Worldwide {} Mortality rate of Covid-19".format(string),fontsize=50)
  plt.xlabel('Days passed since the begining', fontsize=40)
  plt.ylabel('{} mortality rate'.format(string),fontsize=30)
  plt.plot(days, tlist, 'r', marker='o', linewidth=1.9, label='Mortaity Rate')
  plt.xticks(rotation=90)
  plt.yticks(size=20)
  plt.legend(loc='best',fontsize=40)
  plt.grid(True, linewidth=2.0)
  plt.show()

def World_Statistics(T_cases,T_deaths,W_c_per_m,W_d_per_m):
  print("The total cases of COVID-19 are:",T_cases)
  print("The total deaths of COVID-19 are:",T_deaths)
  print("The World's Mortality Rate for COVID-19 is: {}%".format((T_deaths/T_cases)*100))
  print("There are {} cases per 1 million and {} deaths per 1 million people all around the world".format(W_c_per_m,W_d_per_m))

def plot_daily(days,cases,deaths,weekly_cases,weekly_deaths,country):
    fig = plt.figure(figsize=(50,20))
    ax = fig.add_axes([0,0,1,1])
    plt.title("Daily cases and deaths {}".format(country),fontsize=50)
    plt.xlabel('Day', fontsize=40)
    plt.ylabel('New Cases/New Deaths',fontsize=40)
    ax.bar(days,cases,color='r',width=0.9, label='New Cases')
    ax.bar(days,deaths, color= 'm',width=0.9, label='New Deaths')
    plt.plot(days,weekly_cases,color='b',linewidth=6,label='weekly average cases')
    plt.plot(days,weekly_deaths,color='g',linewidth=6,label='weekly average deaths')
    plt.yticks(size=20)
    plt.xticks(rotation=90)
    plt.legend(fontsize=40)
    plt.grid(True)
    plt.show()

def plot_cumulative(days,cases,deaths,country,scale,number):
    plt.figure(figsize=(50,20))
    plt.title("Cumulative cases and deaths {} ({} scale)".format(country,scale),fontsize=50)
    plt.xlabel('Days passed since the begining', fontsize=40)
    plt.ylabel('Cumulative Cases/Deaths ('+ scale + ' scale)',fontsize=30)
    plt.plot(days, cases, 'r', marker='o', linewidth=1.9, label='Cases')
    plt.plot(days, deaths, 'm', marker='*', linewidth=1.9, label='Deaths')
    plt.yscale(scale)
    plt.xticks(rotation=90)
    if ((scale=="linear") and (number!=0)):
      d = (cases[-1]-cases[0])/10
      plt.yticks(np.arange(cases[0], cases[-1], d))
    plt.legend(loc='best',fontsize=40)
    plt.grid(True, linewidth=2.0)
    plt.show()

def plot_daily_tests(days,tests,weekly_tests,country):
    fig = plt.figure(figsize=(50,20))
    ax = fig.add_axes([0,0,1,1])
    plt.title("Daily tests {}".format(country),fontsize=50,color='C0')
    plt.xlabel('Day', fontsize=40)
    plt.ylabel('New Tests',fontsize=40)
    ax.bar(days,tests,color='g',width=0.9, label='New Tests')
    plt.plot(days,weekly_tests,color='b',linewidth=6,label='weekly average tests')
    plt.yticks(size=20)
    plt.xticks(rotation=90)
    plt.legend(fontsize=40)
    plt.grid(True)
    plt.show()

def plot_cum_tests(days,tests,country,scale,number):
    plt.figure(figsize=(50,20))
    plt.title("Cumulative tests {} ({} scale)".format(country,scale),fontsize=50,color='C0')
    plt.xlabel('Days passed since the begining', fontsize=40)
    plt.ylabel('Cumulative Tests ('+ scale + ' scale)',fontsize=30)
    plt.plot(days, tests, 'g', marker='*', linewidth=1.9, label='Tests')
    plt.yscale(scale)
    plt.xticks(rotation=90)
    if ((scale=="linear") and (number!=0)):
      d = (tests[-1]-tests[0])/10
      plt.yticks(np.arange(tests[0], tests[-1], d),size=10)
    plt.legend(loc='best',fontsize=40)
    plt.grid(True, linewidth=2.0)
    plt.show()

def plot_patients(days,hosp_p,icu_p,country,scale,number):
    plt.figure(figsize=(50,20))
    plt.title("Hospitilized patients and ICU patients {} ({} scale)".format(country,scale),fontsize=50,color='C0')
    plt.xlabel('Days passed since the begining', fontsize=40)
    plt.ylabel('Number of patients ('+ scale + ' scale)',fontsize=30)
    plt.plot(days, hosp_p, 'c', marker='o', linewidth=1.9, label='Hospitilized Patients')
    plt.plot(days, icu_p, 'r', marker='*', linewidth=1.9, label='ICU Patients')
    plt.yscale(scale)
    plt.xticks(rotation=90)
    if ((scale=="linear") and (number!=0)):
      d = (hosp_p[-1]-hosp_p[0])/10
      plt.yticks(np.arange(hosp_p[0],hosp_p[-1], d),size=10)
    plt.legend(loc='best',fontsize=40)
    plt.grid(True, linewidth=2.0)
    plt.show()

def plot_pie_charts(countries,tlist, index, title):
    S = 0
    xlist = []
    ylist = []
    sorted_list = sorted(tlist, key=itemgetter(index),reverse=True)
    for i in range(0,11):
      if (i!=10):
        xlist.append(sorted_list[i][index])
        ylist.append(sorted_list[i][0])
      else:
        for j in range(i,len(countries)):
          S = S + sorted_list[j][index]
        xlist.append(S)
        ylist.append('Others')

    c = ['lightcoral', 'rosybrown', 'sandybrown', 'navajowhite', 'gold', 'khaki', 'lightskyblue', 'turquoise', 'lightslategrey', 'thistle', 'pink']
    plt.figure(figsize=(16,14))
    plt.title(title, size=16)
    plt.pie(xlist, colors=c,shadow=True, labels=xlist)
    plt.legend(ylist, loc='upper left', fontsize=11)
    plt.show()

def plot_top5(days,tlist1,tlist2,index1,index2,string):
    sorted_list = sorted(tlist1,key=itemgetter(index1),reverse=True)
    name_list = sorted(tlist2,key=itemgetter(index2),reverse=True)
    plt.figure(figsize=(50,20))
    plt.title("Cumulative {} in the top 5 countries".format(string),fontsize=45)
    plt.xlabel('Days passed since the begining', fontsize=40)
    plt.ylabel("Cumulative {}".format(string),fontsize=30)
    for i in range(0,5):
      plt.plot(days,sorted_list[i], linewidth=3.9, label=name_list[i][0])
    plt.xticks(rotation=90)
    plt.yticks(size=20)
    plt.legend(loc='best',fontsize=30)
    plt.grid(True, linewidth=2.0)
    plt.show()

def Heat_Table(a_list):
  temp_list = sorted(a_list,key=itemgetter(1),reverse=True)
  country_df = pd.DataFrame({'Country Name':[c[0] for c in temp_list], 'Number of Confirmed Cases': [int (c[1]) for c in temp_list],
                            'Number of Deaths': [int (c[2]) for c in temp_list],
                            'Mortality Rate': [c[3] for c in temp_list],
                            'Cases per million': [c[4] for c in temp_list],
                            'Deaths per million': [c[5] for c in temp_list]})

  return (country_df.style.background_gradient(cmap='Oranges'))

def plot_horizontal_bars(cntrs,a_list):
  plt.figure(figsize=(64,64))
  plt.rc('ytick',labelsize=16)
  plt.title("Numbrer of confirmed cases per country around the globe", size=50)
  plt.xlabel("Number of confirmed cases",size=40)
  step = (1/2)*10**6
  plt.xticks(np.arange(0, 10**7, step), size=32)
  plt.grid(True)
  for i in range(len(a_list)):
    plt.barh(cntrs[i],a_list[i][-1])
  plt.show()


def MapPreparation(Overall_per_country): 
    url = 'https://raw.githubusercontent.com/python-visualization/folium/master/examples/data'
    countries_geo = f'{url}/world-countries.json'
    
    print(countries_geo)
    
    with urllib.request.urlopen(countries_geo) as f:
        html = f.read().decode('utf-8')

    my_dictionary = json.loads(html)
    
    # Extract country names from the GeoJSON file
    denominations_json = sorted([feature['properties']['name'] for feature in my_dictionary['features']])

    # Convert Overall_per_country into a Pandas DataFrame directly
    Overall = pd.DataFrame(Overall_per_country)  

    # Ensure at least 7 columns exist (prevent index errors)
    while Overall.shape[1] < 7:
        Overall[len(Overall.columns)] = None

    # Rename the first column to match the country names from GeoJSON
    dataframe_names = Overall.iloc[:, 0].tolist()
    
    # Replace country names with the sorted GeoJSON country names
    Overall.replace({Overall.columns[0]: dict(zip(dataframe_names, denominations_json))}, inplace=True)

    # Helper function to update values for specific countries
    def make_right(index, id):
        for k in range(1, 7):
            Overall.iloc[index, k] = Overall_per_country[id][k]

    # Iterate through the DataFrame and match country names
    for i in range(len(Overall)):
        for j in Overall_per_country:
            if Overall.iloc[i, 0] == j[0]:  # Exact match instead of similarity
                for k in range(1, 7):
                    Overall.iloc[i, k] = j[k]

        # Manually correct specific country names
        if Overall.iloc[i, 0] == "Russia":
            make_right(i, 175)
        elif Overall.iloc[i, 0] == "Iran":
            make_right(i, 98)
        elif Overall.iloc[i, 0] == "Antarctica":
            make_right(i, 3)

    return Overall, countries_geo


def MakeMap(i,color,mylist,Legends,Overall,countries_geo):
  bins = list (Overall[i].quantile(mylist))
  m = folium.Map(location=[10,-10],width='80%',height='80%',top='0%',left='0%',position='relative',tiles='OpenStreetMap',max_zoom=20, min_zoom=0,zoom_start=2)
  folium.Choropleth(
      geo_data=countries_geo,
      name='choropleth',
      data=Overall,
      columns=[0, i],
      key_on='properties.name',
      fill_color=color,
      fill_opacity=0.9,
      line_opacity=0.6,
      legend_name=Legends[i-1],
      bins=bins,
      smooth_factor = 1,
      reset=True
  ).add_to(m)
  folium.LayerControl().add_to(m)
  return (m)

